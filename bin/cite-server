#!/usr/bin/env node


/*
 * A tiny API over Citation's find command. Doesn't handle every option
 * that the in-browser version does, but does most things.
 *
 *
 */

var Citation = require('../citation');

var heartbeat = function(req, res) {res.send("I'm alive!");}

var route = function(req, res) {
  var text = req.param("text");
  var options = req.param("options");
  var pretty = req.param("pretty");

  if (text) {
    text = decodeURIComponent(text);

    // allow citation types to be comma-separated
    if (options && options.types)
      options.types = options.types.split(",");

    var results = Citation.find(text, options);

    var response = {results: results};
    if (options)
      response.options = options;
    else
      response.options = {};

    var json;
    if (pretty)
      json = JSON.stringify(response, null, 4);
    else
      json = JSON.stringify(response);

    // JSONP
    if (req.query.callback)
      json = "" + req.query.callback + "(" + json + ")";

    res.set({'Content-Type': 'application/json'});
    res.send(json);
  } else {
    res.send("Include a block of text to scan for citations in the 'text' parameter.", 500);
  }
};

// server configuration

var express = require('express');
var app = express();

// environment and port
var env = process.env.NODE_ENV || 'development';
var port = parseInt(process.argv[2], 10);
if (isNaN(port)) port = 3000;

// app middleware/settings
app.enable('trust proxy')
  .use(require('body-parser')({limit: "100mb"}))
  .use(require('method-override')())
  .use(express.static(__dirname + '/public'));

// development vs production
if (env == "development")
  app.use(require('errorhandler')({dumpExceptions: true, showStack: true}))
else
  app.use(require('errorhandler')())


// routes
app.get('/', heartbeat);
app.route('/citation/find').get(route).post(route);


// boot it up!
app.listen(port, function() {
  console.log("Express server listening on port %s in %s mode", port, env);
});
